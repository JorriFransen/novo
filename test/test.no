// TODO:
//  - local variables can shadow function names, probably dissalow this
//  - report error for pointer diff with arithmethic assignment (changes left type)
//  - align types
//  - sizeof(), alignof(), offsetof()
//  - #run
//  - #insert

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;

printf :: (format: *u8, ..) -> s32 #foreign;
malloc :: (size: s64) -> *void #foreign;
free :: (ptr: *void) -> void #foreign;

Vec :: struct {
    x: s64;
    y: s64;
}

main :: () -> int {

    vec_test();

    return 0;
}

vec_test :: () {

    // Array of vectors
    count := 5;
    vecs := cast(*Vec, malloc(16 * count));

    // // Write some values
    for i := 0; i < count; i += 1; {

        b := i + 1;
        <(vecs + i) = { b, b * 3 };
    }

    // Test written values
    for i := 0; i < 5; i += 1; {

        b := i + 1;

        v := vecs + i;

        assert(v.x == b);
        assert(v.y == b * 3);
        printf("%d, %d\n".data, v.x, v.y);
    }

    free(cast(*void, vecs));
}
