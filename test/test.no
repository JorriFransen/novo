// TODO:
//  - Free vm?
//  - Make sure ssa allocs are emitted in variable declaration order
//  - Move FFI to instance?
//  - align types
//  - sizeof(), alignof(), offsetof()
//  - test pointer math (requires arrays and/or sizeof())
//  - #run
//  - #insert

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;

printf :: (format: *u8, ..) -> s32 #foreign;

main :: () -> int {

    // printf("Hello, printf(%hhd, %hd, %d, %lld, %d, %hd, %hhd);\n".data, 1, 2, 3, 4, 5, 6, 7);
    //
    // msg := "Hello, World!";
    // printf("%.*s\n".data, msg.length, msg.data);

    for i := 0; i < 20; i += 1; {
        f := fib(i);
        printf("fib(%d) = %d\n".data, i, f);
    }

    return fib(10);
}

recurse :: (x: s64) {

    if (x > 0) {
        recurse(x - 1);
    }

    printf("recurse(%d)\n".data, x);
}

fib :: (x: s64) -> s64 {

    if (x < 2) return x;
    return fib(x - 1) + fib(x - 2);
}
