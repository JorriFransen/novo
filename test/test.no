// TODO:
//  - #run expr with aggregate return type

//  - sizeof(), alignof(), offsetof()
//  - #insert

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;
printf :: (format: *u8, ..) -> s32 #foreign;
// malloc :: (size: s64) -> *void #foreign;
// free :: (ptr: *void) -> void #foreign;

// Vec :: struct {
//     x: s64;
//     y: s64;
// }
//
// vec :: (x: s64, y: s64) -> Vec {
//     return { x, y };
// }

main :: () -> int {
    // v := #run vec(11, 22);
    // printf("{ %lld, %lld }\n".data, v.x, v.y);

    f := #run fib(10);
    return f;
}

fib :: (x: int) -> int {

    if x < 2 return x;

    return fib(x - 1) + fib(x - 2);
}
