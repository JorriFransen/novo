// TODO:
//  - Make sure ssa allocs are emitted in variable declaration order
//  - align types
//  - sizeof(), alignof(), offsetof()
//  - test pointer math (requires arrays and/or sizeof())
//  - #run
//  - #insert

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;

// printf :: (format: *u8, ..) -> s32 #foreign;

INT :: struct {
    v: int;
}

main :: () -> int {
    assert(true);
    x : INT = { 1 };
    y := 2;
    return x.v + y;
    // return x + y;
}

