//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Constant variables (aggregates, dissallow modification...)
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;
//  printf :: (format: cstring, ..) -> s32 #foreign;
// malloc :: (size: s64) -> *void #foreign;
// free :: (ptr: *void) -> void #foreign


//  ret_x :: (x: s64) -> int { return x; }
//  add :: (a: s64, b: s64) -> s64 { return a + b; }

//  Vec2 :: struct {
//      x: s64; y: s64;
//  }

//  vec :: (x: s64, y: s64) -> Vec2 { return { x, y }; }

//  main :: () -> s64 {

//      x := 0;
//      x += 1;
//      v := vec(1, 2);
//      printf("{ %lld, %lld }\n".data, v.x, v.y);

//      return 0;
//  }


#run main();

putchar :: (char: s32) -> s32 #foreign;
foreign_add :: (a: s64, b: s64) -> s32 #foreign;

main :: () -> s64 {

    c : s32 = 'H';


    c = putchar(c);
    c2 := putchar('I');
    putchar('!');
    putchar('\n');

    assert(c + c2 + foreign_add(1, 2) == 148);

    return 0;
}
