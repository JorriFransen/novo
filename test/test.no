// TODO:
//  - align types
//  - sizeof(), alignof(), offsetof()
//  - test pointer math (requires arrays and/or sizeof())
//  - #run
//  - #insert

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;

printf :: (format: *u8, ..) -> s32 #foreign;
malloc :: (size: s64) -> *void #foreign;

Vec :: struct {
    x: s64;
    y: s64;
}

print_v :: (v: *Vec) {
    printf("{ %lld, %lld }\n".data, v.x, v.y);
}

main :: () -> int {

    // TODO: sizeof
    vecs := cast(*Vec, malloc(5 * 16));

    v := vecs;
    for i := 0; i < 5; i += 1; {
        <v = { i + 1, i };
        // v = v + 1;
        v += 1;
    }

    for i := 0; i < 5; i += 1; {
        print_v(vecs + i);
    }

    return 0;
}

