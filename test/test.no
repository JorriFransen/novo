// TODO:
//  - test sign and zero extend
//  - ssa ops for pointer offset and difference
//  - unary -
//  - sizeof()
//  - Make sure ssa allocs are emitted in varaible declaration order
//  - Move FFI to instance?
//  - Free vm?
//  - Foreign functions (call printf)
//  - #run
//  - #insert

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


putchar :: (char: s32) -> s32 #foreign;
puts :: (str: *u8) -> s32 #foreign;
foreign_add :: (a: s64, b: s64) -> s32 #foreign;

main :: () -> int {
    str := "Hello, World!";
    put_string(str);

    start : *u8 = str.data;
    end : *u8 = str.data + str.length;

    return (end - 1) - start;
}

put_string :: (s: string) {
    ptr := s.data;
    for i := 0; i < s.length; i += 1; {

        putchar(cast(s32, <ptr));
        ptr = ptr + 1;
    }
    putchar('\n');
}
