// TODO:
//  offsetof()
//  - builtin atoms for foreign, run import etc.

// Need this wrapper (for run) because "abc".data is not const, maybe it should be?
// print :: (msg: string) {
//     printf()
// }

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;
printf :: (format: *u8, ..) -> s32 #foreign;
// malloc :: (size: s64) -> *void #foreign;
// free :: (ptr: *void) -> void #foreign;


Vec :: struct {
    x: int; y: int;
}

AABB :: struct {
    pos: Vec; size: Vec;
}

main :: () {

    printf("alignof(:*int): %d\n".data, alignof(:*int));
    printf("alignof(Vec): %d\n".data, alignof(Vec));
    printf("alignof(AABB): %d\n".data, alignof(AABB));

    printf("alignof(int): %d\n".data, alignof(int));
    printf("alignof(s64): %d\n".data, alignof(s64));
    printf("alignof(s32): %d\n".data, alignof(s32));
    printf("alignof(s16): %d\n".data, alignof(s16));
    printf("alignof(s8): %d\n".data, alignof(s8));
    printf("alignof(u64): %d\n".data, alignof(u64));
    printf("alignof(u32): %d\n".data, alignof(u32));
    printf("alignof(u16): %d\n".data, alignof(u16));
    printf("alignof(u8): %d\n".data, alignof(u8));
}
