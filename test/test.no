// TODO:
//  - Emit file with inserted strings and their origin position
//  - sizeof(), alignof(), offsetof()
//  - #insert
//  - #insert in local scopes? (This probably requires flattening all statements...)
//  - builtin atoms for foreign, run import etc.

// Need this wrapper (for run) because "abc".data is not const, maybe it should be?
// print :: (msg: string) {
//     printf()
// }

//  - // AST_DECL_FLAG_STORAGE_REQUIRED is only used for arguments/parameters?

//  - Global variables
//  - Constant variables
//  - Basic control flow
//      - switch
//      - defer
//  - Nested function declarations
//  - Cleanup error reporting
//      - seperate creating and submission, this should be cleaner (eg. in valid_cast())

//  - Keyword tokens should be associated with some enum so the parser can switch on this instead of using if-else chains
//  - Redo linear allocator to have blocks
//  - Capture errors, and check for them in tests


// putchar :: (char: s32) -> s32 #foreign;
// puts :: (str: *u8) -> s32 #foreign;
// foreign_add :: (a: s64, b: s64) -> s32 #foreign;
printf :: (format: *u8, ..) -> s32 #foreign;
// malloc :: (size: s64) -> *void #foreign;
// free :: (ptr: *void) -> void #foreign;


#insert main_str();
#insert ret_42_str();

main_str :: () -> string {

    return "main :: () -> int {\n    printf(\"Hello!\".data);\n    return 0;\n    //abc();\n}";
}

ret_42_str :: () -> string {
    return "ret_42 :: () -> int { return 42; }";
}

#run main();
