
#import "c"


main :: () -> int {
    //  printf("Array test!\n".data);

    a1 : [2]int; // Local allocation, uninitialized
    // %0 = ALLOC 16 <[2]int>
    // %1 = ALLOC 8 <*int>
    // STORE_PTR 8 %1 %0

    a2 : [2]int = { 33, 44 }; // Local allocation, initialized
    // %2 = ALLOC 16 <[2]int>
    // MEMCPY %2 &{ 33, 44 }
    // %3 = ALLOC 8 <*int>
    // STORE_PTR 8 %3 %2

    printf("a1: { %lld, %lld }\n".data, a1[0], a1[1]);
    printf("a2: { %lld, %lld }\n".data, a2[0], a2[1]);

    a1[0] = 90;
    a1[1] = 91;
    a2[0] = 92;
    a2[1] = 93;

    printf("\n".data);
    printf("a1: { %lld, %lld }\n".data, a1[0], a1[1]);
    printf("a2: { %lld, %lld }\n".data, a2[0], a2[1]);

    assert(a1.length == 2);
    assert(a1.data == *a1[0]);

    assert(a2.length == 2);
    assert(a2.data == *a2[0]);

    assert(a1.data != a2.data);

    a1 = { 11, 22 }; // Store in local allocation
    // %4 = LOAD_PTR 8 %1
    //  MEMCPY %4 &{ 11, 22 }

    printf("\n".data);
    printf("a1: { %lld, %lld }\n".data, a1[0], a1[1]);
    printf("a2: { %lld, %lld }\n".data, a2[0], a2[1]);

    a1 = a2;         // Store in local allocation, still seperate arrays
    // %6 = LOAD_PTR 8 %1
    // %7 = LOAD_PTR 8 %3
    // MEMCPY %6 %7

    assert(a1.data != a2.data);

    printf("\n".data);
    printf("a1: { %lld, %lld }\n".data, a1[0], a1[1]);
    printf("a2: { %lld, %lld }\n".data, a2[0], a2[1]);

    a3 : [2]int = { add(101, 10), add(202, 20) };

    printf("\n".data);
    printf("a3: { %lld, %lld }\n".data, a3[0], a3[1]);

    a3 = { add(101, 11), add(202, 22) };

    printf("\n".data);
    printf("a3: { %lld, %lld }\n".data, a3[0], a3[1]);

    //  invalid1 := <a2; // Disallow dereference

    //  array_func1(a1); // Create local copy of a1's elements, pass pointer to function

    //  a3 := make_array(55, 66); // Create temporary array for return value, pass pointer, assign (memcpy) to variable after return

    //  // Create uninitialized local allocation, pass it's pointer
    //  a4 : [2]int;
    //  init_array(*a4, 77, 88);

    //  a5 : *[2]int = heap_array(99, 1010); // Allocate array on heap
    //  assert(a5.length == 2);
    //  assert(a5.data != a4.data);

    return 0;

}

add :: (a: s64, b: s64) -> int { return a + b; }
